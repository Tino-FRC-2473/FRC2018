package org.usfirst.frc.team6038.robot.commands;

import org.usfirst.frc.team6038.framework.Database;
import org.usfirst.frc.team6038.framework.components.Devices;
import org.usfirst.frc.team6038.robot.Robot;
import org.usfirst.frc.team6038.robot.RobotMap;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.command.Command;

public class SimpleDriveStraight extends Command {

	// TODO put maxPow in RobotMap
	private final double maxPow = 0.8;
	private double maxEncoder; // The maximum encoder count at which the robot
								// stops
	private double power;

	public SimpleDriveStraight(double encoder, double power) {
		requires(Robot.piDriveTrain);
		this.maxEncoder = encoder;
		if (Math.abs(power) > this.maxPow) {
			this.power = maxPow * Math.signum(power);
		} else {
			this.power = power;
		}
		System.out.println("Simple drive straight constructor passed.");
	}

	@Override
	protected void initialize() {
		System.out.println("initialize running..");
		resetEncoders();
		Robot.piDriveTrain.enable();
		Devices.getInstance().getNavXGyro().zeroYaw();
		Robot.piDriveTrain.setTargetAngle(Database.getInstance().getNumeric(RobotMap.GYRO_YAW));
	}

	public static void resetEncoders() {
		resetOneEncoder(RobotMap.FRONT_LEFT);
		resetOneEncoder(RobotMap.FRONT_RIGHT);
		resetOneEncoder(RobotMap.BACK_LEFT);
		resetOneEncoder(RobotMap.BACK_RIGHT);
	}

	private static void resetOneEncoder(int talonId) {
		Devices.getInstance().getTalon(talonId).changeControlMode(TalonControlMode.Position);
		Devices.getInstance().getTalon(talonId).setPosition(0);
		Devices.getInstance().getTalon(talonId).changeControlMode(TalonControlMode.PercentVbus);
	}

	@Override
	protected void execute() {
		Robot.piDriveTrain.drive(power, Robot.piDriveTrain.getAngleRate());
	}

	private void setRightPow(double pow) {
		Devices.getInstance().getTalon(RobotMap.FRONT_RIGHT).set(-pow);
		Devices.getInstance().getTalon(RobotMap.BACK_RIGHT).set(-pow);
	}

	private void setLeftPow(double pow) {
		System.out.println("set left power: " + pow);
		Devices.getInstance().getTalon(RobotMap.FRONT_LEFT).set(pow);
		Devices.getInstance().getTalon(RobotMap.BACK_LEFT).set(pow);
	}

	private double getAverageEnc(Integer...encConstants) {
		changeAllTalonControlMode(TalonControlMode.Position);
		int n = 0;
		double sum = 0;
		for (Integer enc: encConstants) {
			CANTalon talon = Devices.getInstance().getTalon(enc);
			System.out.println("Encoder: " + talon.getPosition());
			if (talon != null) {
				n++;
				sum += Math.abs(talon.getEncPosition());
			}
		}
		changeAllTalonControlMode(TalonControlMode.PercentVbus);
		
		if (n == 0) {
			// returns max value to make sure the robot stops
			// immediately when there's argument error
			return Integer.MAX_VALUE;
		} else {
			return sum / n;
		}
	}

	private static void changeAllTalonControlMode(TalonControlMode mode) {
		Devices.getInstance().getTalon(RobotMap.FRONT_LEFT).changeControlMode(mode);
		Devices.getInstance().getTalon(RobotMap.FRONT_RIGHT).changeControlMode(mode);
		Devices.getInstance().getTalon(RobotMap.BACK_LEFT).changeControlMode(mode);
		Devices.getInstance().getTalon(RobotMap.BACK_RIGHT).changeControlMode(mode);
	}

	@Override
	protected boolean isFinished() {
		System.out.println("Curr: " + this.getAverageEnc(RobotMap.FRONT_LEFT, RobotMap.FRONT_RIGHT) + ", " + maxEncoder);
		return this.getAverageEnc(RobotMap.FRONT_LEFT, RobotMap.FRONT_RIGHT) >= maxEncoder;
	}

	@Override
	protected void end() {
		setLeftPow(0);
		setRightPow(0);
		Robot.piDriveTrain.disable();
		System.out.println("DriveStraight ended.");
	}

	@Override
	protected void interrupted() {
		Robot.piDriveTrain.disable();
	}

}